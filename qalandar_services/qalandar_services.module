<?php

/**
 * Implements hook_services_resources()
 * @Author Majid Ali
 */
function qalandar_services_services_resources() {
  $api = array(
      'qalandar' => array(
          'actions' => array(
              'retrieve' => array(
                  'help' => 'Retrieve nearest qalandars',
                  'callback' => '_qalandar_services_retrieve',
                  'access callback' => 'user_access',
                  'access arguments' => array('access content'),
                  'access arguments append' => FALSE,
                  'args' => array(
                      array(
                          'name' => 'location',
                          'type' => 'string',
                          'description' => 'User location',
                          'source' => 'data',
                          'optional' => FALSE,
                          'default' => '0',
                      ),
                  ),
              ),
              'consume' => array(
                  'help' => 'Consume qalandar & transfer points to user',
                  'callback' => '_qalandar_services_consume',
                  'access callback' => 'user_access',
                  'access arguments' => array('access content'),
                  'access arguments append' => FALSE,
                  'args' => array(
                      array(
                          'name' => 'info',
                          'type' => 'string',
                          'description' => 'Node id & Points',
                          'source' => 'data',
                          'optional' => FALSE,
                          'default' => '0',
                      ),
                  ),
              ),
              'collection' => array(
                  'help' => 'Users qalandars collection',
                  'callback' => '_qalandar_services_collection',
                  'access callback' => 'user_access',
                  'access arguments' => array('access content'),
                  'access arguments append' => FALSE,
                  'args' => array(
                      array(
                          'name' => 'uid',
                          'type' => 'string',
                          'description' => 'User id',
                          'source' => 'data',
                          'optional' => FALSE,
                          'default' => '0',
                      ),
                  ),
              ),
              'rewards' => array(
                  'help' => 'Get all rewards',
                  'callback' => '_qalandar_services_rewards',
                  'access callback' => 'user_access',
                  'access arguments' => array('access content'),
                  'access arguments append' => FALSE,
                  'args' => array(
                      array(
                          'name' => 'limit',
                          'type' => 'string',
                          'description' => 'offset & limit',
                          'source' => 'data',
                          'optional' => TRUE,
                          'default' => '0',
                      ),
                  ),
              ),
              'forgot_password' => array(
                  'help' => 'Generate and email password to the user',
                  'callback' => '_qalandar_services_password',
                  'access callback' => 'user_access',
                  'access arguments' => array('access content'),
                  'access arguments append' => FALSE,
                  'args' => array(
                      array(
                          'name' => 'mail',
                          'type' => 'string',
                          'description' => 'User Email',
                          'source' => 'data',
                          'optional' => FALSE,
                          'default' => '0',
                      ),
                  ),
              ),
          ),
      ),
  );

  return $api;
}

/**
 * Callback function to retrieve qalandar. Implements Haversine formula.
 * @see https://developers.google.com/maps/articles/phpsqlsearch_v3 
 * @param type $data
 * @return type $node array
 * @Author Majid Ali
 */
function _qalandar_services_retrieve($data) {
  //User latitude/longitude
  $user_latitude = $data['latitude'];
  $user_longitude = $data['longitude'];
  //Proximity in KM
  $proximity = $data['proximity'];
  //Start Limit if empty set 0
  $offset = $data['offset'] ? $data['offset'] : 0;
  //End Limit if empty set 10
  $limit = $data['limit'] ? $data['limit'] : 10;

  if (empty($user_latitude) || empty($user_longitude) || empty($proximity)) {
    return services_error("Required parameters missing", 406);
  }

  // Keep it simple. We don't need high accuracy here.
  $earth_radius = 6371;

  //Implement haversine formula to get all the qalandar id's in the defined proximity
  //Only using db_query because its fast.
  $query = db_query_range('SELECT entity_id, ( :earth_radius * acos( cos( radians(:user_latitude) ) * field_location_lat_cos * cos( field_location_lng_rad - radians(:user_longitude) ) + sin( radians(:user_latitude) ) * field_location_lat_sin ) ) AS distance FROM field_data_field_location fl join node nd ON fl.entity_id = nd.nid WHERE nd.consumed = 0 HAVING distance < :proximity ORDER BY distance', $offset, $limit, array(':earth_radius' => $earth_radius, ':user_latitude' => $user_latitude, ':user_longitude' => $user_longitude, ':proximity' => $proximity));
  $res_ids = $query->fetchAll();

  $nodes = array();
  if (!empty($res_ids)) {
    //Loop ids to load node object
    foreach ($res_ids as $nid) {
      // Load node.
      $node = node_load($nid->entity_id);
      //Since Node object only provide URI of Images need to add URL of it.
      $image_src = $node->field_qalandar_image[LANGUAGE_NONE][0]['uri'];
      $image_url = file_create_url($image_src);
      $node->field_qalandar_image[LANGUAGE_NONE][0]['url'] = $image_url;
      $node->distance = $nid->distance;
      //Adding node obj into array  
      $nodes[] = $node;
    }
  }
  if (empty($nodes))
    return services_error("No qalandar found", 404);
  else
    return $nodes;
}

/**
 * Callback function to consume qalandar
 * @param type $data
 * @return string
 * @Author Majid Ali
 */
function _qalandar_services_consume($data) {
  $nid = $data['nid'];
  $points = (int) $data['points'];
  $uid = $data['uid'];

  //Check if we are loaded
  if (empty($nid) || empty($points) || empty($uid)) {
    return services_error("Required parameters missing", 406);
  } else {
    $user = user_load($uid);
    $node = node_load($nid);

    if (!empty($user) && !empty($node) && $node->consumed == 0) {
      $user_points = $user->field_user_points[LANGUAGE_NONE][0]['value'];
      $user->field_user_points[LANGUAGE_NONE][0]['value'] = $user_points + $points;
      //Set the status to consumed
      $node->consumed = 1;
      if (user_save($user)) {
        node_save($node);
        $query = db_insert('qalandar_collections')
          ->fields(array(
              'uid' => $user->uid,
              'nid' => $node->nid,
          ))
          ->execute();
        $success_msg = "You have been awarded " . $points . " points";
      } else {
        return services_error("Operation faild", 406);
      }
    } else {
      return services_error("Qalandar already consumed", 406);
    }
  }
  return $success_msg;
}

/**
 * Callback function to get user qalandar's collection
 * @param type $data
 * @return type $node
 * @Author Majid Ali
 */
function _qalandar_services_collection($data) {
  $uid = $data['uid'];
  //Start Limit if empty set 0
  $offset = $data['offset'] ? $data['offset'] : 0;
  //End Limit if empty set 10
  $limit = $data['limit'] ? $data['limit'] : 10;
  //Check if we got the uid
  if (empty($uid)) {
    return services_error("Required parameters missing", 406);
  } else {
    $user = user_load($uid);
    $nodes = array();
    if ($user) {
      //Get all the qalandars the user has aquired.
      $collections = db_select('qalandar_collections', 'qc')
          ->fields('qc', array('uid', 'nid', 'timestamp'))
          ->condition('qc.uid', $user->uid, '=')
          ->range($offset, $limit)
          ->execute()->fetchAll();
      if ($collections) {
        foreach ($collections as $collection) {
          //Prepare nodes & add additional params
          $node = node_load($collection->nid);
          $node->collected_on = $collection->timestamp;
          //Since Node object only provide URI of Images need to add URL of it.
          $image_src = $node->field_qalandar_image[LANGUAGE_NONE][0]['uri'];
          $image_url = file_create_url($image_src);
          $node->field_qalandar_image[LANGUAGE_NONE][0]['url'] = $image_url;
          $nodes[] = $node;
        }
      }
    } else {
      return services_error("User doesn't exist", 406);
    }
  }
  if (empty($nodes))
    return services_error("No qalandar found", 404);
  else
    return $nodes;
}

/**
 * Callback function to get rewads
 * @param type $data
 * @return type $rewards
 * @Author Majid Ali
 */
function _qalandar_services_rewards($data) {
  //Start Limit if empty set 0
  $offset = $data['offset'] ? $data['offset'] : 0;
  //End Limit if empty set 10
  $limit = $data['limit'] ? $data['limit'] : 10;

  // Query all of the nids of a reward content type.
  $nids = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'reward', '=')
    ->range($offset, $limit)
    ->execute()
    ->fetchCol();

  // Get all of the reward nodes.
  $nodes = node_load_multiple($nids);
  $rewards = array();
  foreach ($nodes as $node) {
    //Since Node object only provide URI of Images need to add URL of it.
    $image_src = $node->field_reward_image[LANGUAGE_NONE][0]['uri'];
    $image_url = file_create_url($image_src);
    $node->field_reward_image[LANGUAGE_NONE][0]['url'] = $image_url;
    $rewards[] = $node;
  }
  return $rewards;
}

/**
 * Callback function to generate and email password to user.
 * @global type $language
 * @param type $mail
 * @return type
 * @Author Majid Ali
 */
function _qalandar_services_password($data) {
  global $language;
  $mail = trim($data['mail']);
  // Try to load user by email.
  $users = user_load_multiple(array(), array('mail' => $mail, 'status' => '1'));
  $user = reset($users);

  if (!isset($user->uid) || $user->uid == 1) {
    return services_error(t('Sorry, %mail is not recognized as an e-mail address.', array('%mail' => $mail)), 406);
  }
  // Generate random password.
  $random_password = user_password();
  // Save new password.
  user_save($user, array('pass' => $random_password), 'account');
  // Retrive email body and subject.
  $message = _recovery_password_mail_text('email_text', $language, TRUE, $user);

  if ($message) {
    // Replace [user_new_password] placeholder with new password.
    $message = str_replace("[user_new_password]", $random_password, $message);
  }

  $subject = _recovery_password_mail_text('email_subject', $language, TRUE, $user);
  if (module_exists("htmlmail")) {
    // For html mail convert new lines to br.
    $message = nl2br($message);
  }
  $params = array(
      'body' => $message,
      'subject' => $subject,
  );
  $to = $user->mail;
  $from = variable_get('site_mail');
  if (drupal_mail('qalandar_services', 'recovery_password', $to, language_default(), $params, $from, TRUE)) {
    $success_msg = t("Further instructions have been sent to your registered Email-id.");
  } else {
    return services_error("Error Sending Recovery Mail. Please contact administrator.", 406);
  }
  return $success_msg;
}

/**
 * Returns a mail string for a variable name.
 * Used by qalandar_services_mail().
 * @param type $key
 * @param type $language
 * @param type $replace
 * @param type $user
 * @return type
 * @Author Majid Ali
 */
function _recovery_password_mail_text($key, $language = NULL, $replace = TRUE, $user = array()) {
  $langcode = isset($language) ? $language->language : NULL;

  // No override, return default string.
  switch ($key) {
    case 'email_subject':
      $text = t('Replacement login information for [user:name] at [site:name]', array(), array('langcode' => $langcode));
      break;

    case 'email_text':
      $text = t("[user:name],

A request to reset the password for your account has been made at [site:name].

Your new password is [user_new_password].


--  [site:name] team", array(), array('langcode' => $langcode));
      break;
  }
  if ($replace) {
    // Token Replace the text.
    return token_replace($text, array('user' => $user));
  }
  return $text;
}

/**
 * Implements hook_mail().
 * @param type $key
 * @param type $message
 * @param type $params
 * @Author Majid Ali
 */
function qalandar_services_mail($key, &$message, $params) {
  switch ($key) {
    case 'recovery_password':
      // Mail parameters used for recovery mail.
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      if (module_exists("htmlmail")) {
        // For html mail.
        $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      }
      break;
  }
}
